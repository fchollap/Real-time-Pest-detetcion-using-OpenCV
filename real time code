Code
#####
# Created By: Ruth NeeÃŸen, Febin Chollapra
# Date: 2022-03-10
# Version = 1.0
# This module detects plants in images, removes the background and finds different colored 
# spots on the plants
# #
from skimage.exposure import exposure
from datetime import datetime
import cv2 as cv
import os
import numpy as np
import matplotlib.pyplot as plt
class Log:
 def __init__(self):
 self.filename = "log/log.txt"
 self.write("[" + datetime.now() .strftime("%y-%m-%d %H:%M") + "]\n")
 def write(self, string):
 f = open(self.filename, "a")
 f.write(string)
 f.close()
class ColorCorrection:
 ################# Histogram matching part ######################
 # Use the histogram matching and the blending for images with color panels and work
 # with the blended image
 # 1. replace colorPanelImg with color panel photo,
 # 2. replace ref with color panel reference image
 def __init__(self):
 colorPanelImg = cv.imread(cv.samples.findFile("images/reference/img.png"))
 ref = cv.imread(cv.samples.findFile("images/reference/img.png"))
 ref = cv.cvtColor(ref, cv.COLOR_BGR2RGB)
 self.matched = exposure.match_histograms(colorPanelImg, ref, channel_axis=-1)
 def getCorrectedImage(self, image): # Blend images equally.
 list_images = [image, self.matched]
 equal_fraction = 1.0 / (len(list_images))
 output = np.zeros_like(list_images[0])
 for img in list_images:
 output = output + img * equal_fraction
 output = output.astype(np.uint8)
 return output
36
class PlantDetection:
 def __init__(self, folder, filename):
 self.filename = filename;
 self.image = cv.imread(cv.samples.findFile(folder + filename))
 self.image = cv.cvtColor(self.image, cv.COLOR_BGR2RGB)
 ### put color correction back in
 #cc = ColorCorrection();
 #self.image = cv.cvtColor(cc.getCorrectedImage(self.image), cv.COLOR_BGR2RGB)
 #change to HSV color space
 self.image_HSV = cv.cvtColor(self.image,cv.COLOR_RGB2HSV)
 self.plantsImage = None;
 def findPlants(self):
 #green mask, should be adjusted after the implementation of the color panel
 plt.figure(figsize=(20, 42))
 plt.imshow(self.image)
 lower=np.array([36,60,130])
 upper=np.array([86,255,255])
 mask = cv.inRange(self.image_HSV ,lower,upper)
 res = cv.bitwise_and(self.image, self.image,mask=mask)
 blue, green, red = cv.split(res)
 #create closed outlines to create a mask from it
 kernel = cv.getStructuringElement(cv.MORPH_DILATE, (5,5))
 close = cv.morphologyEx(green, cv.MORPH_CLOSE, kernel, iterations=1)
 contours, hierarchy = cv.findContours(close, mode=cv.RETR_EXTERNAL, 
method=cv.CHAIN_APPROX_SIMPLE)
 #edit contours and remove smaller spots outside of the plant
 contourList = list(contours)
 contourList2 = list()
 for c in contourList:
 if cv.contourArea(c) > 140.0:
 contourList2.append(c)
 contours2 = tuple(contourList2)
 mask = np.zeros_like(self.image)
 cv.drawContours(image=mask, contours=contours2, contourIdx=-1, color=(255, 0, 0), 
thickness=-1, lineType=cv.LINE_AA)
 # output the contoured plants
 #plt.figure(figsize=(10, 22))
 #plt.imshow(cv.bitwise_and(self.image, mask))
 
37
 #create mask from contours via grayscaled image and treshold method and add it 
 #to the input picture to get all colors on our plants back in
 img2gray = cv.cvtColor(mask,cv.COLOR_BGR2GRAY)
 ret, mask = cv.threshold(img2gray, 10, 255, cv.THRESH_BINARY)
 self.plantsImage = cv.bitwise_and(self.image,self.image,mask=mask)
 return self.plantsImage;
 def findStickers(self, log):
 # get all colors on our plants below green in HSV colorspace
 lower = np.array([0,50,0])
 upper = np.array([45,255,255])
 grid_HSV = cv.cvtColor(self.plantsImage,cv.COLOR_RGB2HSV)
 #mask lower color area
 mask1 = cv.inRange(grid_HSV,lower,upper)
 # get all colors on our plants above green in HSV colorspace
 lower = np.array([86,50,0])
 upper = np.array([179,255,255])
 #mask upper color area
 mask2 = cv.inRange(grid_HSV, lower, upper)
 ##add the two mask to a final mask to get all colors except green on the plants
 mask = cv.bitwise_or(mask1, mask2)
 unique, counts = np.unique(mask, return_counts=True)
 counterAll = 0;
 stickerDict = dict(zip(unique, counts))
 if 255 in stickerDict:
 counterAll = stickerDict[255]
 log.write("Colored found: " + str(counterAll) + "\n")
 res = cv.bitwise_and(self.plantsImage, self.plantsImage,mask=mask)
 return res;
 def findRedStickers(self, log):
 # get all colors on our plants below green in HSV colorspace
 lower = np.array([0,100,0])
 upper = np.array([20,255,255])
 grid_HSV = cv.cvtColor(self.plantsImage,cv.COLOR_RGB2HSV)
 #mask lower color area
 mask1 = cv.inRange(grid_HSV,lower,upper)
 # get all colors on our plants above green in HSV colorspace
 lower = np.array([150,100,0])
 upper = np.array([179,255,255])
38
 #mask upper color area
 mask2 = cv.inRange(grid_HSV, lower, upper)
 ##add the two mask to a final mask to get all colors except green on the plants
 mask = cv.bitwise_or(mask1, mask2)
 unique, counts = np.unique(mask, return_counts=True)
 counterRed = 0;
 redColorDict = dict(zip(unique, counts))
 if 255 in redColorDict:
 counterRed = redColorDict[255]
 log.write("Red found: " + str(counterRed) + "\n")
 res = cv.bitwise_and(self.plantsImage, self.plantsImage,mask=mask)
 return res;
 def findSmallSpots(self, log):
 grid_HSV = cv.cvtColor(self.plantsImage,cv.COLOR_RGB2HSV)
 mask = cv.inRange(grid_HSV, np.array([0,0,100]), np.array([179,50,255]))
 unique, counts = np.unique(mask, return_counts=True)
 counterSmall = 0;
 smallSpotsDict = dict(zip(unique, counts))
 if 255 in smallSpotsDict:
 counterSmall = smallSpotsDict[255]
 log.write("White found: " + str(counterSmall) + "\n")
 res = cv.bitwise_and(self.plantsImage, self.plantsImage,mask=mask)
 return res;
 # draws the detected spots on the input image
 def showResultImage(self, processedImage):
 img_gray = cv.cvtColor(processedImage, cv.COLOR_RGB2GRAY)
 th, thresh = cv.threshold(img_gray, 0, 255, cv.THRESH_BINARY)
 kernel = cv.getStructuringElement(cv.MORPH_DILATE, (2,2))
 close = cv.morphologyEx(thresh, cv.MORPH_CLOSE, kernel, iterations=1)
 contours, hierarchy = cv.findContours(close, mode=cv.RETR_EXTERNAL, 
method=cv.CHAIN_APPROX_SIMPLE)
 cv.drawContours(image=self.image, contours=contours, contourIdx=-1, color=(255, 0, 
255), thickness=-1, lineType=cv.LINE_AA)
 plt.figure(figsize=(20, 42))
 plt.imshow(self.image)
folder = "images/input/";
log = Log();
for filename in os.listdir(folder):
 image = PlantDetection(folder, filename)
 image.findPlants()
 log.write("File: " + filename + "\n")
39
 red = image.findRedStickers(log)
 allColors = image.findStickers(log)
 white = image.findSmallSpots(log)
 image.showResultImage(white)
 image.showResultImage(red)
 image.showResultImage(allColors)
